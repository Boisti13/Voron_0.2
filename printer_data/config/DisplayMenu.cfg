
# Summary of items in this file over the "stock" / default menu config:
# Additional temps for TPU, PETG. 
# A Cooldown command
# Bed leveing options, which automatically homes the bed before it goes through the leveling procedure
# A "Shutdown" menu option which allows you to safely stop the Rasp Pi and can then turn the machine off.
# At the very bottom of the file I have disabled a bunch of menu items that I did not think were useful.

# If you want to change the order of menu items, adjust the "index" value which applies to whatever sub group those items are in.
# Below you can add additional temps easily using the examples provided. 

#Entries
[menu __main __sdcard __reprint]
type: command
name: Reprint Last
enable: {(not printer.idle_timeout.state == "Printing")}
gcode:
    {% set state = printer.print_stats.state %}
    {% set file = printer.print_stats.filename %}
    {% if state == 'printing' %}
        { action_respond_info("Print is still running") }
    {% elif not file.endswith("gcode") %}
        { action_respond_info("No file to reprint") }
    {% else %}
        SDCARD_PRINT_FILE FILENAME="{file}"
        { action_respond_info("Print job restarted.") }
    {% endif %}

#####################################################################

[menu __main __network]
type: list
name: Network
index: 4

[menu __main __network _mdns]
type: command
name: mDNS: {printer.network_status.mdns}

[menu __main __network __ethernet]
type: list
name: Ethernet

[menu __main __network __ethernet _ethip]
type: command
name: {printer.network_status.ethip}

[menu __main __network __wifi]
type: list
name: Wifi

[menu __main __network __wifi _wifissid]
type: command
name: Wifi SSID: {printer.network_status.wifissid}

[menu __main __network __wifi _wifiip]
type: command
name: {printer.network_status.wifiip}

[menu __main __network __zerotier]
type: list
name: Zerotier

[menu __main __network __zerotier _zeroip]
type: command
name: {printer.network_status.zeroip}

#####################################################################

#[menu __main __transport_pos]
#type: input
#name: T-Mode: {'ON ' if menu.input else 'OFF'}
#input: {printer.save_variables.variables.printer_in_transport_position}
#input_min: 0
#input_max: 1
#input_step: 1
#gcode: {% if menu.input == 1  %} TRANSPORT_POSITION {% else %} RESET_TRANSPORT_POSITION {% endif %}

#####################################################################
    
[menu __main __nevermore]
type: list
name: Nevermore
index: 5

[menu __main __nevermore __filteronoff]
type: input
name: Toggle: {'ON ' if menu.input else 'OFF'}
#index:1
input: {printer['fan_generic nevermore'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode: {% if menu.input == 1  %}SET_FAN_SPEED FAN=nevermore SPEED=1.0 {% else %} SET_FAN_SPEED FAN=nevermore SPEED=0.0 {% endif %}

[menu __main __nevermore __speed]
type: input
name: Speed:  {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
#index:2
input: {printer['fan_generic nevermore'].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode: SET_FAN_SPEED FAN=nevermore SPEED={menu.input}

[menu __main __nevermore __filtertime]
type: command
name: Runtime: {"%.1f"|format(printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int / 3600)}h

[menu __main __nevermore __reset_filter]
type: command
name: Reset Filter
gcode:


#####################################################################
#       Control LEDs on printer
#####################################################################

[menu __main __led]
type: list
name: LED
index:3

[menu __main __led __chamberled]
type: input
name: Chamber: {'ON ' if menu.input else 'OFF'}
input: {printer['neopixel Chamber_LEDs'].color_data[0][1]}
input_min: 0
input_max: 1
input_step: 1
gcode: {% if menu.input == 1  %} chamber_on {% else %} chamber_off {% endif %}
       {% if menu.input == 1  %} status_ready {% else %} status_off {% endif %}
       {% if menu.input == 1  %} nozzle_leds_on {% else %} nozzle_leds_off {% endif %}

[menu __main __led __allled]
type: input
name: All: {'ON ' if menu.input else 'OFF'}
input: {printer['neopixel Chamber_LEDs'].color_data[0][1]}
input_min: 0
input_max: 1
input_step: 1
gcode: {% if menu.input == 1  %} chamber_on {% else %} chamber_off {% endif %}
       {% if menu.input == 1  %} status_ready {% else %} status_off {% endif %}
       {% if menu.input == 1  %} nozzle_leds_on {% else %} nozzle_leds_off {% endif %}
       {% if menu.input == 1  %} ebay_leds_on {% else %} ebay_leds_off {% endif %}

[menu __main __led __ebayon]
type: command
name: Back ON
gcode: 
        ebay_leds_on
               
#####################################################################

#Preheat ABS 
[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS
index:3

#Preheat PLA Nozzle
[menu __main __temp __preheat_pla]
type: list
name: Preheat PLA
index:4

#Preheat ABS All
[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S100
    M104 S240

################################################

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S240

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S100


[menu __main __temp __preheat_petg]
type: list
name: Preheat PETG
index:5

[menu __main __temp __preheat_petg __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S80
    M104 S240

################################################

[menu __main __temp __preheat_petg __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S240

[menu __main __temp __preheat_petg __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S80

#Entries for TPU
[menu __main __temp __preheat_tpu]
type: list
name: Preheat TPU
index:6

[menu __main __temp __preheat_tpu __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S230

[menu __main __temp __preheat_tpu __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S230

[menu __main __temp __preheat_tpu __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __main __temp __cooldown]
type: command
name: Cooldown
index:7
gcode: 
    M140 S0
    M104 S0

#####################################################################

#Shutdown from: https://klipper.discourse.group/t/shutdown-command-to-the-raspberry/584/3
[delayed_gcode shutdown_machine]
gcode:
     {action_call_remote_method("shutdown_machine")}
initial_duration: 0.0

[menu __main __poweroff]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Safely Shutdown
gcode:
     M117 Shutdown_RPI
     M118 Shutdown_RPI
     { menu.exit() }    
     UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1 
   
#####################################################################
#       Disable items from stock- uncomment to disable
#####################################################################
[menu __main __octoprint]
type: disabled
#[menu __main __nevermore]
#type: disabled
#[menu __main __statistic]
#type: disabled
#[menu __main __temp]
#type:disabled
#[menu __main __temp __preheat_pla]
#type: disabled
#[menu __main __temp __preheat_abs]
#type: disabled
#[menu __main __filament __loadf]
#type: disabled
#[menu __main __filament __loads]
#type: disabled
#[menu __main __filament __unloadf]
#type: disabled
#[menu __main __filament __unloads]
#type: disabled
#[menu __main __filament __feed]
#type: disabled
#[menu __main __filament __loadf]
#type: disabled
#[menu __main __filament __hotend0_target]
#type: disabled
#[menu __main __temp __cooldown]
#type: disabled
[menu __main __setup __calib __delta_calib_auto]
type: disabled
[menu __main __setup __calib __delta_calib_man]
type: disabled
#[menu __main __control __move_10mm]
#type: disabled
#[menu __main __control __move_01mm]
#type: disabled
#[menu __main __setup __calib __bedprobe]
#type: disabled
#[menu __main __setup __dump]
#type: disabled
#[menu __main __control __fanonoff]
#type: disabled
#[menu __main __setup __calib]
#type: disabled
