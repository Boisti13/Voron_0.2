# ---------------------------------------------------------
# Quick Input Shaper Calibration (Bambu-style)
# Runs before each print (adds ~1–2 min overhead).
# Workflow:
#   - Capture baseline shaper values from printer.cfg
#   - Run a fast calibration on X and/or Y
#   - Print with those temporary values
#   - Restore baseline at END_PRINT / CANCEL_PRINT
# ---------------------------------------------------------

# Simple noise check — measures accelerometer background noise
# (useful to verify ADXL/LIS2DW is working and not too noisy)
[gcode_macro QUICK_NOISE_CHECK]
description: 2–4s accelerometer sanity check (no motion)
gcode:
  M117 Checking accel noise...
  MEASURE_AXES_NOISE
  M117 Noise check done

# Helper: move to the resonance test point defined in [resonance_tester]
# (usually a corner or center point). This avoids duplicating code.
[gcode_macro MOVE_TO_RESO_POINT]
gcode:
  {% set p = printer.configfile.settings.resonance_tester.probe_points[0] %}
  {% set x = p[0]|float %}{% set y = p[1]|float %}{% set z = p[2]|float %}
  G0 X{x} Y{y} F6000
  G0 Z{z} F1200

# Run a quick shaper calibration on one axis only (X or Y).
# Defaults to X if none given. Does a short move at the test point,
# measures with the accelerometer, and applies the best shaper
# immediately for this session (not saved to printer.cfg).
[gcode_macro QUICK_SHAPER_FAST]
description: Quick shaper recal on one axis near the corner test point (AXIS=X|Y)
variable_axis: "X"
gcode:
  {% set axis = (params.AXIS|default(printer["gcode_macro QUICK_SHAPER_FAST"].axis)|string).upper() %}
  {% if axis not in ["X","Y"] %}{% set axis = "X" %}{% endif %}

  M117 Quick shaper {axis}
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}
  MOVE_TO_RESO_POINT
  SHAPER_CALIBRATE AXIS={axis}   # calibrate only the selected axis
  SET_INPUT_SHAPER               # echo current shaper settings to console
  M117 Shaper updated ({axis})

# Context holder: stores baseline shaper values in memory (RAM only).
# These are pulled from printer.cfg at the start of a print, so we can
# restore them at the end. Values here are defaults until captured.
[gcode_macro _SHAPER_CTX]
variable_type_x: "mzv"
variable_freq_x: 78.8
variable_damp_x: 0.1
variable_type_y: "mzv"
variable_freq_y: 50.2
variable_damp_y: 0.1
gcode:

# Capture currently-saved shaper values from printer.cfg.
# This is called in START_PRINT before quick calibration, so we can
# restore the user’s baseline later with RESTORE_SHAPER_BASELINE.
[gcode_macro CAPTURE_SHAPER_BASELINE]
gcode:
  {% set cfg = printer.configfile.settings.input_shaper %}
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=type_x VALUE="'{cfg.shaper_type_x|default('mzv')}'"
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=freq_x VALUE={cfg.shaper_freq_x|default(60.0)}
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=damp_x VALUE={cfg.damping_ratio_x|default(0.1)}
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=type_y VALUE="'{cfg.shaper_type_y|default('mzv')}'"
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=freq_y VALUE={cfg.shaper_freq_y|default(60.0)}
  SET_GCODE_VARIABLE MACRO=_SHAPER_CTX VARIABLE=damp_y VALUE={cfg.damping_ratio_y|default(0.1)}
  M117 Shaper baseline captured

# Restore baseline values (the ones captured above).
# This is used at END_PRINT and CANCEL_PRINT so your printer always
# goes back to its known-good config after the job.
[gcode_macro RESTORE_SHAPER_BASELINE]
gcode:
  {% set ctx = printer["gcode_macro _SHAPER_CTX"] %}
  {% set txx = (ctx.type_x|string).replace("'", "") %}
  {% set tyy = (ctx.type_y|string).replace("'", "") %}
  M117 Restoring shaper...
  SET_INPUT_SHAPER SHAPER_TYPE_X={txx} SHAPER_FREQ_X={ctx.freq_x} DAMPING_RATIO_X={ctx.damp_x} SHAPER_TYPE_Y={tyy} SHAPER_FREQ_Y={ctx.freq_y} DAMPING_RATIO_Y={ctx.damp_y}
  SET_INPUT_SHAPER
  M117 Shaper restored

# Utility: prints the currently active shaper parameters to the console.
# Useful to confirm whether the fast values (after calibration) or the
# baseline values (after restore) are currently active.
[gcode_macro SHOW_SHAPER]
gcode:
  SET_INPUT_SHAPER
